(function() {
  'use strict';
  angular.module('r1kApp').config(function($stateProvider) {
    return $stateProvider.state('main.tools', {
      url: 'tools/:toolID',
      templateUrl: 'app/tools/tools.html',
      controller: 'ToolsCtrl'
    });
  });

  'use strict';

  angular.module('r1kApp').controller('ToolsCtrl', function($scope, $stateParams, Device, $state, $mdDialog, $sce) {
    var globalUpdateFirmware, initFileInfo, toolID;
    toolID = tools[$stateParams.toolID || $state.current.url];
    if (angular.isUndefined(toolID)) {
      $state.go('main.home', {}, {
        reload: true,
        inherit: false,
        notify: true
      });
    } else {
      $scope.dialog = $state.includes('dialog');
      $scope.forms = toolID.forms;
      $scope.newSettings = [];
      $scope.cb = [];
      angular.forEach($scope.forms, function(value, key) {
        return angular.forEach(value.input, function(v, k) {
          var x;
          if (v.type !== 'file' && v.type !== 'form' && $scope.newSettings.indexOf(k) === -1) {
            if (v.type === 'array') {
              x = {};
              angular.forEach(v.values, function(val, name) {
                return x[name] = 0;
              });
              $scope.resets = x;
            }
            $scope.newSettings.push(k);
            if (v.type !== 'checkbox') {
              return $scope.currentSettings[k] = '';
            }
          }
        });
      });
    }
    $scope.resetDefaults = function(b) {
      var a, x;
      a = $scope.resets;
      if (!a['all']) {
        x = [];
        angular.forEach(a, function(v, k) {
          if (v) {
            return x.push(k);
          }
        });
        $scope.currentSettings[b] = x.join(':');
        return $scope.cb = [];
      } else {
        $scope.currentSettings[b] = 'all';
        return $scope.cb["sys.reset-setting"] = "reset";
      }
    };
    initFileInfo = {
      noSubmit: true,
      bundle: formData,
      errMsg: '',
      state: ''
    };
    $scope.fileInfo = initFileInfo;
    $scope.test = 'No';
    $scope.$watch('fileInfo.bundle', function(v) {
      if (v.name !== void 0) {
        return $scope.test = 'Yes';
      }
    });
    $scope.dropFile = function(files, accept) {
      var toAccept;
      $scope.fileInfo = angular.copy(initFileInfo);
      $scope.fileInfo.bundle = files[0];
      if (files.length === 1) {
        toAccept = false;
        if (angular.isArray(accept)) {
          angular.forEach(accept, function(v, i) {
            if (!toAccept) {
              return toAccept = v.test(files[0].name);
            }
          });
        } else {
          toAccept = accept.test(files[0].name);
        }
        if (!toAccept) {
          $scope.fileInfo.errMsg = 'This file does not appear to be the correct extension.';
          return $scope.fileInfo.state = 'error';
        } else {
          $scope.fileInfo.noSubmit = false;
          return $scope.fileInfo.state = 'valid';
        }
      } else {
        $scope.fileInfo.errMsg = 'Sorry, but only a single file can be uploaded.';
        return $scope.fileInfo.state = 'error';
      }
    };
    $scope.submitForm = function(reqType) {
      return $sce.trustAsResourceUrl(Device.baseUrl(reqType));
    };
    $scope.updateFirmware2 = function(reqType) {
      var mydig;
      $scope.configChk = true;
      mydig = $mdDialog.show({
        locals: {
          type: reqType,
          file: $scope.fileInfo.bundle,
          dialog: $scope.dialog,
          configChk: $scope.configChk,
          globalUpdateFirmware: globalUpdateFirmware
        },
        clickOutsideToClose: false,
        escapeToClose: false,
        template: '<md-dialog aria-label="resetDialog"><md-content> <h2>Warning!</h2> <p class="warnMsg">Performing this action may require rebooting the device. Would you like to continue?</p> </md-content> <div class="md-actions"> <md-button class="md-raised" ng-click="close()">No</md-button> <md-button class="md-raised md-primary" ng-click="confirm()">Yes</md-button> </div> </md-dialog>',
        controller: 'warning',
        onComplete: function() {
          angular.element(document).find('body').css('overflow', 'visible');
          angular.element(document).find('md-dialog-container').css('margin', 'auto');
          return angular.element(document).find('md-dialog-container').css('width', '50%');
        }
      });
      return mydig.then(function() {
        return angular.element(document).find('body').css('overflow', 'initial');
      });
    };
    $scope.updateFirmware = function(reqType) {
      $mdDialog.show({
        locals: {
          type: reqType,
          file: $scope.fileInfo.bundle,
          dialog: $scope.dialog
        },
        clickOutsideToClose: false,
        escapeToClose: false,
        template: '<md-dialog aria-label="Alert" class="toolDialog"><md-content><div> <h6 class="progressMessage">{{upgrader.message}}</h6> <div class="dialogContent" ng-show="upgrader.show"> <span class="progressValue" ng-show="upgrader.total > 0"><strong>{{upgrader.total}}</strong><span>%</span></span> <md-progress-circular md-mode="indeterminate" md-diameter="110" class="outerProgress"></md-progress-circular> </div> <h6 class="versionMessage" ng-show="version.length > 0">v{{version}}</h6> </div></md-content> <md-button class="md-action md-raised md-primary" ng-if="confirm" ng-click="hideDialog()">OK</md-button></md-dialog>',
        controller: 'notifyCtrl'
      });
      return $scope.fileInfo = initFileInfo;
    };
    return globalUpdateFirmware = function(reqType) {
      $mdDialog.show({
        locals: {
          type: reqType,
          file: $scope.fileInfo.bundle,
          dialog: $scope.dialog
        },
        clickOutsideToClose: false,
        escapeToClose: false,
        template: '<md-dialog aria-label="Alert" class="toolDialog"><md-content><div> <h6 class="progressMessage">{{upgrader.message}}</h6> <div class="dialogContent" ng-show="upgrader.show"> <span class="progressValue" ng-show="upgrader.total > 0"><strong>{{upgrader.total}}</strong><span>%</span></span> <md-progress-circular md-mode="indeterminate" md-diameter="110" class="outerProgress"></md-progress-circular> </div> <h6 class="versionMessage" ng-show="version.length > 0">v{{version}}</h6> </div></md-content> <md-button class="md-action md-raised md-primary" ng-if="confirm" ng-click="hideDialog()">OK</md-button></md-dialog>',
        controller: 'notifyCtrl'
      });
      return $scope.fileInfo = initFileInfo;
    };
  }).controller('notifyCtrl', function($scope, Device, type, file, $mdDialog, $state, $window, $timeout, dialog) {
    var bName, complete, int, notifyMsg, refresh, successMsg, version;
    $window.scroll(0, 0);
    successMsg = (function() {
      switch (type) {
        case 'uploadFirmware':
          return 'Device has successfully been updated! App will be refreshed now.';
        case 'importContacts':
          return 'Contacts have been successfully imported!';
        case 'importConfig':
          return 'Device configuration has been successfully imported! For security, some SIP account settings aren\'t imported and must be provided to register with the SIP server.';
        default:
          return 'Upload successfully completed!';
      }
    })();
    notifyMsg = {
      'begin': 'Uploading file.',
      'upload': type === 'importConfig' ? 'Applying new configuration.' : 'File upload complete.',
      'init': 'Update initializing.',
      'update': 'Device is updating.',
      'WaitingCallEnd': 'Update waiting for active call(s) to end.',
      'Flashing': 'Update in progress.',
      'reboot': 'Update complete! Rebooting device.',
      'success': successMsg,
      'error': 'Process could not be completed. Please check the device.',
      'device': 'Update has successfully completed but the device is unavailable. Please check the device IP address.'
    };
    refresh = false;
    int = '';
    $scope.confirm = false;
    $scope.version = '';
    if (type === 'uploadFirmware') {
      bName = file.name;
      if (bName.search(/(FLX)/) > -1 && bName.search(/-/) > -1) {
        version = bName.substr(0, bName.search(/[^A-Za-z0-9-]/));
        $scope.version = version.replace(/(?:[^-]+-){3}(\d+)-(\d+)-(\d+)-(\d+)-?/g, '$1.$2.$3.$4');
      }
    }
    $scope.hideDialog = function() {
      $mdDialog.hide();
      if (refresh) {
        return $state.go('main.home').then(function() {
          return $window.location.reload(true);
        });
      } else if (!dialog) {
        return $state.reload();
      }
    };
    $scope.upgrader = {
      message: notifyMsg['begin'],
      total: 0,
      show: 1
    };
    Device.update(file, type).then(function(success) {
      var m;
      $scope.upgrader.total = 100;
      m = 'success';
      if (type === 'uploadFirmware') {
        $scope.upgrader.message = notifyMsg[m];
        refresh = true;
        return $timeout($scope.hideDialog, 5000);
      } else {
        complete(m);
        return $scope.upgrader.show = 0;
      }
    }, function(err) {
      $scope.version = '';
      $scope.upgrader.show = 0;
      if (err) {
        console.log('err', err);
      }
      return complete(err ? err : 'error');
    }, function(notify) {
      $scope.upgrader.message = notifyMsg[notify[1]];
      if (type === 'uploadFirmware') {
        if (notify[1] === 'upload') {
          if (notify[0] < 100) {
            return $scope.upgrader.message = notifyMsg['begin'];
          }
        } else if (notify[1] === 'update') {
          return $scope.upgrader.total = notify[0];
        } else {
          return $scope.upgrader.total = 0;
        }
      } else {
        return $scope.upgrader.total = notify[0];
      }
    });
    return complete = function(t) {
      $scope.upgrader.message = notifyMsg[t] || t;
      return $scope.confirm = true;
    };
  }).controller('warning', function($scope, globalUpdateFirmware, Device, file, configChk, type, $mdDialog) {
    configChk = true;
    $scope.close = function() {
      return $mdDialog.hide();
    };
    return $scope.confirm = function(reqType, file) {
      return globalUpdateFirmware(type, file);
    };
  });

}).call(this);

//# sourceMappingURL=tools.js.map
