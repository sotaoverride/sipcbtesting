(function() {
  'use strict';
  angular.module('r1kApp').factory('Device', function($http, $q, $upload, $interval, $rootScope) {
    var Device, availSettings, availStats, sessionID;
    sessionID = '';
    Device = {};
    Device.sessionId = function(x) {
      return sessionID = x;
    };
    Device.baseUrl = function(r) {
      return window.location.protocol + '//' + window.location.hostname + '/cgi-bin/cgiclient.cgi?' + r + (sessionID ? '=&sessionId=' + sessionID : '=');
    };
    Device.request = function(reqType, reqData) {
      var data, def, url;
      def = $q.defer();
      url = Device.baseUrl(reqType);
      data = {
        url: url,
        method: 'GET',
        params: reqType === 'requestStatus' ? reqData || availStats : reqData || availSettings
      };
      $http(data).success(function(awesomeThings) {
        var doc, j, parser;
        parser = new DOMParser();
        doc = parser.parseFromString(awesomeThings, "application/xml");
        j = {};
        angular.forEach(doc.getElementsByTagName('properties')[0].attributes, function(prop) {
          if (prop.name === 'voip.dial-plan') {
            prop.value = unescape(prop.value);
          }
          return j[prop.name] = prop.value;
        });
        if (~~j["sessionExpired"]) {
          $rootScope.timedOut = true;
        } else {
          $rootScope.sessionExp = 900;
        }
        return def.resolve(j);
      }).error(function(errMsg) {
        return def.reject(errMsg);
      });
      return def.promise;
    };
    Device.update = function(reqData, reqType) {
      var def2, upload;
      def2 = $q.defer();
      upload = $upload.upload({
        url: Device.baseUrl(reqType),
        method: 'POST',
        file: reqData
      }).progress(function(evt) {
        var msg, pct;
        pct = parseInt(100.0 * evt.loaded / evt.total);
        msg = 'upload';
        if (pct === 100 && reqType === 'uploadFirmware') {
          msg = 'init';
          pct = -1;
        }
        return def2.notify([pct, msg]);
      }).success(function(data) {
        var cancelCheck, checkReboot, checkUpgrade, countReboot, rbtPost, rebootInt;
        if (reqType === 'uploadFirmware') {
          def2.notify([-1, 'init']);
          countReboot = 0;
          rebootInt = 15;
          checkUpgrade = $interval(function() {
            return Device.request('requestStatus').then(function(awesomeThings) {
              var currConfigStatus, currStatus;
              currStatus = awesomeThings["sys.upgrade-status"];
              currConfigStatus = awesomeThings["sys.config-import-status"];
              if (currConfigStatus === 'rebooting') {
                def2.notify([-1, 'reboot']);
                return cancelCheck(checkUpgrade);
              } else if (currStatus < 99) {
                return def2.notify([currStatus, 'update']);
              } else if (currStatus === 'WaitingCallEnd') {
                return def2.notify([currStatus, 'WaitingCallEnd']);
              } else if (currStatus === 'Flashing') {
                return def2.notify([currStatus, 'Flashing']);
              } else if (currStatus === 'Rebooting' || currStatus > 98) {
                def2.notify([-1, 'reboot']);
                cancelCheck(checkUpgrade);
                return checkReboot();
              } else {
                def2.reject();
                return cancelCheck(checkUpgrade);
              }
            }, function() {
              def2.reject();
              return cancelCheck(checkUpgrade);
            });
          }, 3000, 0);
          cancelCheck = function(int) {
            return $interval.cancel(int);
          };
          rbtPost = function(rbtCheck) {
            countReboot++;
            if (countReboot === rebootInt) {
              def2.reject('device');
              cancelCheck(rbtCheck);
            }
            return Device.request('requestStatus').then(function(woohoo) {
              var rbtStatus;
              rbtStatus = woohoo["sys.upgrade-status"];
              if (rbtStatus === 'Ready') {
                def2.resolve();
                return cancelCheck(rbtCheck);
              } else if (rbtStatus === 'Rebooting') {
                return def2.notify([-1, 'reboot']);
              }
            }, function(badThings) {
              return def2.notify([-1, 'reboot']);
            });
          };
          return checkReboot = function() {
            var rbtCheck;
            return rbtCheck = $interval(function() {
              return rbtPost(rbtCheck);
            }, 20000, rebootInt);
          };
        } else {
          $rootScope.sessionExp = 900;
          return def2.resolve(data);
        }
      }, function() {
        return def2.reject();
      });
      return def2.promise;
    };
    availSettings = {
      "sys.ui-mask": "",
      "sys.enable-deploy": "",
      "sys.auto-deploy": "",
      "sys.provisioning-interval": "",
      "sys.ftp-srv1": "",
      "sys.ftp-srv2": "",
      "audio.ring-tone": "",
      "audio.eq": "",
      "audio.high-pass-filter": "",
      "voip.codec1": "",
      "voip.codec2": "",
      "voip.codec3": "",
      "voip.codec4": "",
      "voip.codec5": "",
      "voip.ptime": "",
      "voip.mwi": "",
      "voip.vm-number": "",
      "voip.auto-answer": "",
      "voip.do-not-disturb": "",
      "voip.duration": "",
      "voip.dial-plan": "",
      "voip.always-forwarding": "",
      "voip.always-forwarding-num": "",
      "voip.busy-forwarding": "",
      "voip.busy-forwarding-num": "",
      "voip.noanswer-forwarding": "",
      "voip.noanswer-forwarding-num": "",
      "voip.noanswer-delay": "",
      "sys.region": "",
      "sys.time-zone": "",
      "sys.twenty-four-hour-time": "",
      "sys.date-format": "",
      "sys.dst-enabled": "",
      "sys.dst-start-rules": "",
      "sys.dst-end-rules": "",
      "net.dhcp": "",
      "net.ip": "",
      "net.subnet": "",
      "net.gateway": "",
      "net.dns1": "",
      "net.dns2": "",
      "net.ntp1": "",
      "net.ntp2": "",
      "net.ntp3": "",
      "net.ntp4": "",
      "net.ntp-enabled": "",
      "net.vlan": "",
      "net.vlan-id": "",
      "net.dot1x-enabled": "",
      "net.dot1x-auth-method": "",
      "net.dot1x-anonymous-identity": "",
      "net.dot1x-identity": "",
      "net.dot1x-password": "",
      "net.dot1x-cert-path": "",
      "voip.registrar": "",
      "voip.registrar-backup": "",
      "voip.realm": "",
      "voip.proxy": "",
      "voip.reg-use-proxy": "",
      "voip.user": "",
      "voip.password": "",
      "voip.id": "",
      "voip.name": "",
      "voip.reg-timeout": "",
      "voip.rereg-delay": "",
      "voip.use-timer": "",
      "voip.timer-se": "",
      "voip.timer-min-se": "",
      "voip.use-100rel": "",
      "voip.auto-update-nat": "",
      "voip.no-refer-sub": "",
      "voip.allow-strict": "",
      "voip.min-size": "",
      "voip.dtmf-method": "",
      "voip.dtmf-rtp-payload-type": "",
      "voip.media-onhold-method": "",
      "voip.use-srtp": "",
      "voip.rtp-port": "",
      "voip.udp-tcp-selection": "",
      "voip.local-port": "",
      "voip.ip-addr": "",
      "voip.stun-srv": "",
      "voip.use-ice": "",
      "voip.ice-regular": "",
      "voip.ice-max-hosts": "",
      "voip.ice-no-rtcp": "",
      "voip.use-turn": "",
      "voip.turn-srv": "",
      "voip.turn-user": "",
      "voip.turn-passwd": "",
      "voip.turn-tcp": "",
      "voip.set-qos": "",
      "sys.verbose-log-enabled": "",
      "sys.product": "",
      "sys.base-ver": "",
      "net.mac": "",
      "sys.base-sernum": "",
      "sys.voip-capable": "",
      "sys.displaylink-capable": "",
      "sys.systemname": "",
      "sys.telnet-password": "",
      "sys.require-https": "",
      "sys.enable-btn-camera": "",
      "sys.enable-btn-audio": "",
      "sys.enable-btn-volume": "",
      "sys.enable-btn-bluetooth": "",
      "sys.enable-led-call": "",
      "sys.enable-led-nfc": "",
      "sys.power-saving-mode": "",
      "sys.power-saving-time": "",
      "sys.snmp-enable": "",
      "sys.snmp-address": "",
      "sys.snmp-community": "",
      "sys.snmp-device-location": "",
      "sys.snmp-contact-name": "",
      "sys.aux-usb-ip": "",
      "sys.aux-usb-subnet": "",
      "sys.dialer-connection-mode": "",
      "audio.analog-audio-in-mode": "",
      "audio.analog-audio-in-gain": "",
      "cam.camera-ptz-home": "",
      "cam.camera-flicker": "",
      "cam.cam-ptz-save-as-default": "",
      "cam.cam-ptz-apply-defaults": "",
      "cam.cam-image-save-as-default": "",
      "cam.cam-image-apply-defaults": "",
      "cam.camera-image-defaults": "",
      "bt.bt-enable": "",
      "bt.bt-mac": "",
      "bt.bt-name": "",
      "bt.bt-pin": "",
      "bt.bt-pair-timeout": "",
      "bt.bt-connect-timeout": "",
      "bt.bt-autoconnect": "",
      "ble.ble-advertise": "",
      "ble.ble-pair-timeout": "",
      "sys.enable-telnet": "",
      "sys.recent-call-enabled": "",
      "sys.language": "",
      "ble.ble-status": "",
      "ble.ble-paired": "",
      "ble.ble-connected": "",
      "bt.nfc-enable": ""
    };
    availStats = {
      "call.status.usb": "",
      "call.status.bt": "",
      "sys.upgrade-status": "",
      "sys.config-import-status": "",
      "sys.camera-upgrade-status": "",
      "sys.bt-upgrade-status": "",
      "sys.dialer-battery-state": "",
      "audio.usb-audio-stream": "",
      "cam.camera-status": "",
      "cam.camera-stream": "",
      "cam.camera-door": "",
      "bt.bt-status": "",
      "bt.bt-paired": "",
      "bt.bt-paired-list": "",
      "bt.bt-connected": "",
      "ble.ble-status": "",
      "ble.ble-paired": "",
      "ble.ble-connected": "",
      "cam.camera-pan": "",
      "cam.camera-tilt": "",
      "cam.camera-zoom": "",
      "cam.camera-backlight": "",
      "cam.camera-brightness": "",
      "cam.camera-contrast": "",
      "cam.camera-saturation": "",
      "cam.camera-sharpness": "",
      "cam.camera-hue": "",
      "cam.camera-gamma": ""
    };
    return Device;
  });

}).call(this);

//# sourceMappingURL=device.js.map
